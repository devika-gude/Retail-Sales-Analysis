USE db;

-- TABLE CREATION --

-- Creating the retail_sales table --
CREATE TABLE retail_sales
(
    transactions_id INT PRIMARY KEY,
    sale_date DATE,
    sale_time TIME,
    customer_id INT,
    gender VARCHAR(10),
    age INT,
    category VARCHAR(35),
    quantity INT,
    price_per_unit FLOAT,
    cogs FLOAT,
    total_sale FLOAT
);


-- DATA RETRIEVAL QUERIES --

-- Retrieving all data from the retail_sales table:
SELECT * FROM retail_sales;

-- Counting the total number of transactions in retail_sales:
SELECT COUNT(*) FROM retail_sales;

-- Counting the number of distinct customers in retail_sales:
SELECT COUNT(DISTINCT customer_id) FROM retail_sales;



-- FILTERED DATA QUERIES --

-- Total Sales Trend Over Time for a Specific Date Range
-- Query: Retrieve the total sales trend for a specific date range (the year 2022), broken down by month.
SELECT DATE_FORMAT(sale_date, '%Y-%m') AS month,  
       SUM(total_sale) AS total_sales  
FROM retail_sales  
WHERE sale_date BETWEEN '2022-01-01' AND '2022-12-31'  -- filter for the year 2022
GROUP BY month  
ORDER BY month;


-- Calculate total sales and orders by category:
-- Query: Retrieves the sum of sales and the total number of orders for each category
SELECT category,  
       SUM(total_sale) as net_sale,  
       COUNT(*) as total_orders  
FROM retail_sales  
GROUP BY category;


-- Find the average age of customers who purchased items from the 'Beauty' category:
-- Query: Retrieves the sum of sales and the total number of orders for the 'Beauty' category
SELECT ROUND(AVG(age), 2) as avg_age  
FROM retail_sales  
WHERE category = 'Beauty';


-- Find all transactions where the total sale is greater than 1000:
-- Query: Retrieves all the transactions where the total sale amount exceeds 1000.
SELECT *  
FROM retail_sales  
WHERE total_sale > 1000;



-- AGGREGATED DATA QUERIES --


-- Count transactions by gender and category:
-- Query: Retrieves a count of the total transactions for each gender within each product category.
SELECT category,  
       gender,  
       COUNT(*) as total_trans  
FROM retail_sales  
GROUP BY category, gender  
ORDER BY category;

-- Top 5 customers based on highest total sales:
-- Query: Retrieve the five customers who have made the highest total purchases.
SELECT 
    customer_id,
    SUM(total_sale) as total_sales
FROM retail_sales
GROUP BY 1
ORDER BY 2 DESC
LIMIT 5;

-- Determine the number of unique customers who made purchases in each category:
-- Query: Retrieves the number of unique customers who have made purchases in each product category.
SELECT 
    category,    
    COUNT(DISTINCT customer_id) AS cnt_unique_cs
FROM retail_sales
GROUP BY category;



-- TIME-BASED DATA QUERIES --

-- Classifying sales transactions into shifts and calculating total orders for each shift:
-- Query: Classify each transaction into a specific shift based on the sale time and return the total number of orders for each shift.
WITH hourly_sale
AS
(
SELECT *,
    CASE
        WHEN EXTRACT(HOUR FROM sale_time) < 12 THEN 'Morning'
        WHEN EXTRACT(HOUR FROM sale_time) BETWEEN 12 AND 17 THEN 'Afternoon'
        ELSE 'Evening'
    END as shift
FROM retail_sales
)
SELECT 
    shift,
    COUNT(*) as total_orders    
FROM hourly_sale
GROUP BY shift;
 
 
-- Identify the category with the highest number of total purchases:
-- Query: Retrieves the category with the highest number of total purchases.
SELECT 
    category, 
    COUNT(*) AS total_purchases
FROM retail_sales
GROUP BY category
ORDER BY total_purchases DESC
LIMIT 1;


-- Calculate the total revenue generated by each category:
-- Query: Retrieves the total revenue generated by each product category.
SELECT 
    category, 
    SUM(total_sale) AS total_revenue
FROM retail_sales
GROUP BY category;


-- DATA SEGREGATION --
-- Retrieving all data again to segregate it for documentation:
SELECT *  
FROM retail_sales;






